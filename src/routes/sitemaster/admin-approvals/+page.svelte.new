<script lang="ts">
  import { onMount } from 'svelte';
  import { supabase } from '$lib/auth/supabase';
  import { checkIfSiteMaster } from '$lib/auth/middleware';
  import { goto } from '$app/navigation';
  import Button from '$lib/components/common/Button.svelte';
  import Notification from '$lib/components/common/Notification.svelte';
  import AdminApproval from '$lib/components/sitemaster/AdminApproval.svelte';
  
  // Define types
  interface AdminRequest {
    id: string;
    user_id: string;
    reason: string;
    status: 'pending' | 'approved' | 'rejected';
    requested_at: string;
    responded_at: string | null;
    users: {
      email: string;
      first_name?: string;
      last_name?: string;
    };
  }
  
  let loading = true;
  let adminRequests: AdminRequest[] = [];
  let errorMessage = '';
  let showError = false;
  let successMessage = '';
  let showSuccess = false;
  let processingId: string | null = null;
  let isAuthorized = false;
  
  onMount(async () => {
    try {
      console.log('[AdminApprovals] Checking authorization...');
      // Get current session
      const { data: { session } } = await supabase.auth.getSession();
      
      if (!session) {
        console.error('[AdminApprovals] No session found');
        errorMessage = 'You must be logged in to access this page';
        showError = true;
        goto('/auth/login');
        return;
      }
      
      console.log('[AdminApprovals] User email:', session.user.email);
      
      // Check if user is site master
      const isSiteMaster = await checkIfSiteMaster();
      console.log('[AdminApprovals] Is site master check result:', isSiteMaster);
      
      if (!isSiteMaster) {
        // Check if the email domain is @sandoog.com as a fallback
        if (session.user.email && session.user.email.toLowerCase().endsWith('@sandoog.com')) {
          console.log('[AdminApprovals] Email domain check passed, granting access');
          // Ensure database is updated
          await supabase
            .from('users')
            .upsert({
              id: session.user.id,
              email: session.user.email,
              is_admin: true,
              is_site_master: true
            });
          
          isAuthorized = true;
        } else {
          console.error('[AdminApprovals] User not authorized');
          errorMessage = 'You are not authorized to access this page';
          showError = true;
          goto('/');
          return;
        }
      } else {
        isAuthorized = true;
      }
      
      await loadAdminRequests();
    } catch (error) {
      console.error('[AdminApprovals] Error:', error);
      errorMessage = 'Failed to load admin requests. Please try again.';
      showError = true;
    } finally {
      loading = false;
    }
  });
  
  async function loadAdminRequests() {
    console.log('[AdminApprovals] Loading admin requests...');
    const { data, error } = await supabase
      .from('admin_requests')
      .select(`
        id,
        user_id,
        reason,
        status,
        requested_at,
        responded_at,
        users:user_id (
          email,
          first_name,
          last_name
        )
      `)
      .order('requested_at', { ascending: false });
      
    if (error) {
      console.error('[AdminApprovals] Error loading requests:', error);
      errorMessage = 'Failed to load admin requests. Please try again.';
      showError = true;
      return;
    }
    
    console.log('[AdminApprovals] Requests loaded:', data?.length || 0);
    
    // Transform the data to match AdminRequest type
    adminRequests = (data || []).map(item => ({
      ...item,
      users: Array.isArray(item.users) ? item.users[0] : item.users
    })) as AdminRequest[];
  }
  
  async function approveRequest(requestId: string) {
    console.log('[AdminApprovals] Approving request:', requestId);
    processingId = requestId;
    try {
      // Get current user
      const { data: { session } } = await supabase.auth.getSession();
      
      if (!session) {
        errorMessage = 'You must be logged in to approve requests.';
        showError = true;
        return;
      }
      
      // Call the RPC function
      const { error } = await supabase.rpc('approve_admin_request', {
        request_id: requestId,
        site_master_id: session.user.id
      });
      
      if (error) {
        console.error('[AdminApprovals] Error approving request:', error);
        errorMessage = `Failed to approve request: ${error.message}`;
        showError = true;
        return;
      }
      
      // Update the local state
      adminRequests = adminRequests.map(request => {
        if (request.id === requestId) {
          return {
            ...request,
            status: 'approved',
            responded_at: new Date().toISOString()
          };
        }
        return request;
      });
      
      successMessage = 'Admin request approved successfully!';
      showSuccess = true;
    } catch (error: any) {
      console.error('[AdminApprovals] Error:', error);
      errorMessage = `Failed to approve request: ${error.message || 'Unknown error'}`;
      showError = true;
    } finally {
      processingId = null;
    }
  }
  
  async function rejectRequest(requestId: string) {
    console.log('[AdminApprovals] Rejecting request:', requestId);
    processingId = requestId;
    try {
      // Get current user
      const { data: { session } } = await supabase.auth.getSession();
      
      if (!session) {
        errorMessage = 'You must be logged in to reject requests.';
        showError = true;
        return;
      }
      
      // Call the RPC function
      const { error } = await supabase.rpc('reject_admin_request', {
        request_id: requestId,
        site_master_id: session.user.id
      });
      
      if (error) {
        console.error('[AdminApprovals] Error rejecting request:', error);
        errorMessage = `Failed to reject request: ${error.message}`;
        showError = true;
        return;
      }
      
      // Update the local state
      adminRequests = adminRequests.map(request => {
        if (request.id === requestId) {
          return {
            ...request,
            status: 'rejected',
            responded_at: new Date().toISOString()
          };
        }
        return request;
      });
      
      successMessage = 'Admin request rejected successfully!';
      showSuccess = true;
    } catch (error: any) {
      console.error('[AdminApprovals] Error:', error);
      errorMessage = `Failed to reject request: ${error.message || 'Unknown error'}`;
      showError = true;
    } finally {
      processingId = null;
    }
  }
  
  // Filter requests by status
  let activeFilter: 'all' | 'pending' | 'approved' | 'rejected' = 'all';
  
  $: filteredRequests = activeFilter === 'all' 
    ? adminRequests 
    : adminRequests.filter(req => req.status === activeFilter);
</script>

<svelte:head>
  <title>Admin Request Approvals | Sandoog</title>
</svelte:head>

{#if isAuthorized}
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-10">
    <div class="mb-8 flex justify-between items-center">
      <div>
        <h1 class="text-3xl font-bold text-gray-900">Admin Request Approvals</h1>
        <p class="mt-2 text-sm text-gray-500">
          Review and manage admin role requests from users
        </p>
      </div>
      <div>
        <a href="/sitemaster" class="text-indigo-600 hover:text-indigo-500">
          ‚Üê Back to Dashboard
        </a>
      </div>
    </div>
    
    {#if loading}
      <div class="flex items-center justify-center h-64">
        <div class="animate-spin rounded-full h-10 w-10 border-t-2 border-b-2 border-indigo-500"></div>
      </div>
    {:else}
      <!-- Filter tabs -->
      <div class="mb-6 border-b border-gray-200">
        <nav class="-mb-px flex space-x-8" aria-label="Tabs">
          <button
            class="whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm
              {activeFilter === 'all' 
                ? 'border-indigo-500 text-indigo-600' 
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'}"
            on:click={() => activeFilter = 'all'}
          >
            All Requests
          </button>
          <button
            class="whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm
              {activeFilter === 'pending' 
                ? 'border-yellow-500 text-yellow-600' 
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'}"
            on:click={() => activeFilter = 'pending'}
          >
            Pending
          </button>
          <button
            class="whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm
              {activeFilter === 'approved' 
                ? 'border-green-500 text-green-600' 
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'}"
            on:click={() => activeFilter = 'approved'}
          >
            Approved
          </button>
          <button
            class="whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm
              {activeFilter === 'rejected' 
                ? 'border-red-500 text-red-600' 
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'}"
            on:click={() => activeFilter = 'rejected'}
          >
            Rejected
          </button>
        </nav>
      </div>
      
      {#if filteredRequests.length === 0}
        <div class="bg-white shadow overflow-hidden sm:rounded-md">
          <div class="px-4 py-5 sm:p-6 text-center">
            <p class="text-gray-500">No admin requests found with the selected filter.</p>
          </div>
        </div>
      {:else}
        <div class="bg-white shadow overflow-hidden sm:rounded-md">
          <ul class="divide-y divide-gray-200">
            {#each filteredRequests as request}
              <AdminApproval 
                {request} 
                loading={processingId === request.id}
                on:approve={({ detail }) => approveRequest(detail.id)}
                on:reject={({ detail }) => rejectRequest(detail.id)}
              />
            {/each}
          </ul>
        </div>
      {/if}
    {/if}
  </div>
{:else if loading}
  <div class="flex items-center justify-center h-screen">
    <div class="animate-spin rounded-full h-12 w-12 border-t-4 border-b-4 border-indigo-500"></div>
  </div>
{:else}
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-10 text-center">
    <div class="bg-red-50 shadow overflow-hidden sm:rounded-lg p-6">
      <h2 class="text-2xl font-bold text-red-800">Access Denied</h2>
      <p class="mt-4 text-red-600">
        You are not authorized to access the admin approvals page.
      </p>
      <div class="mt-6">
        <a href="/" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
          Return to Home
        </a>
      </div>
    </div>
  </div>
{/if}

<Notification
  type="error"
  message={errorMessage}
  bind:show={showError}
  on:close={() => (showError = false)}
/>

<Notification
  type="success"
  message={successMessage}
  bind:show={showSuccess}
  on:close={() => (showSuccess = false)}
/> 